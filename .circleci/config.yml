version: 2.1

# Define a job to be invoked later in a workflow.
commands:
  destroy_environment:
    steps:
      - run:
          name: Destroy environment
          # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable
          # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID
          when: on_fail
          command: |
              aws cloudformation delete-stack --stack-name ec2-${CIRCLE_WORKFLOW_ID:0:7}
jobs:

#   create_infrastructure:
#     docker:
#       - image: amazon/aws-cli
#     steps:
#       - checkout
#       - run:
#          name: Create cloudformation stack
#          command: |
#            aws cloudformation create-stack --stack-name ec2-${CIRCLE_WORKFLOW_ID:0:7} --template-body file://create-instance.template --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM"
#       - run: return 1
#       - destroy_environment

#  configure_infrastructure:
#    docker:
#      - image: python:3.7-alpine3.11
#    steps:
#      - checkout
#      - add_ssh_keys:
#          fingerprints: ["ee:94:18:ee:cf:1d:28:fe:01:38:7e:f4:85:a4:0d:ec"]
#      - run:
#          name: Install Ansible
#          command: |
#            apk add --update ansible
#      - run:
#          name: Run playbook and configure server
#          command: |
#            ansible-playbook -i exo3/inventory.txt exo3/main.yml

  # Fetch and save the pipeline ID (bucket ID) responsible for the last release.
  get_last_deployment_id:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Fetch and save the old pipeline ID (bucket name) responsible for the last release
          command: |
            aws cloudformation \
            list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
            --no-paginate --output text > ~/textfile.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - textfile.txt

  create_and_deploy_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute bucket.yml - Create cloudformation stack
          command: |
            aws cloudformation deploy \
            --template-file bucket.template \
            --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides MyBucketName="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"

      - run: aws s3 sync . s3://mybucket-${CIRCLE_WORKFLOW_ID:0:7} --delete

  promote_to_production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute cloudfront.template
          command: |
            aws cloudformation deploy \
            --template-file cloudfront.template \
            --stack-name production-distro \
            --parameter-overrides PipelineID="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"

  clean_up_old_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Destroy previous s3 bucket and cloudformation stack
          command: |
            export OldBucketID=$(cat ~/textfile.txt)
            aws s3 rm "s3://${OldBucketID}" --recursive


# Invoke jobs via workflows
workflows:
  create_infrastructure-workflow:
    jobs:
      - create_and_deploy_front_end
      - promote_to_production:
          requires:
            - create_and_deploy_front_end
      - get_last_deployment_id
      - clean_up_old_front_end:
          requires:
            - get_last_deployment_id
            - promote_to_production
#       - create_infrastructure
#       - configure_infrastructure

